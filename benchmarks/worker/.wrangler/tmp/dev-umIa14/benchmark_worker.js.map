{
  "version": 3,
  "sources": ["../bundle-xtvoLe/checked-fetch.js", "../../../benchmark_worker.js", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-xtvoLe/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-xtvoLe/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/speed/cloudflare_durable_ex/benchmarks/worker/.wrangler/tmp/dev-umIa14",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "// This Cloudflare Worker implements a Durable Object for benchmarking purposes\n\nexport class BenchmarkDurableObject {\n  constructor(state, env) {\n    this.state = state;\n    this.storage = state.storage;\n    \n    // WebSocket sessions\n    this.sessions = new Map();\n  }\n  \n  // Handle HTTP requests\n  async fetch(request) {\n    const url = new URL(request.url);\n    const pathname = url.pathname;\n    \n    // Handle WebSocket upgrade requests\n    if (request.headers.get('Upgrade') === 'websocket') {\n      const pair = new WebSocketPair();\n      const [client, server] = Object.values(pair);\n      \n      // Set up WebSocket handlers\n      server.accept();\n      \n      const session = {\n        webSocket: server,\n        id: crypto.randomUUID(),\n      };\n      \n      this.sessions.set(session.id, session);\n      \n      // Handle messages from the client\n      server.addEventListener('message', async (event) => {\n        await this.handleWebSocketMessage(session, event.data);\n      });\n\n      // Handle WebSocket closing\n      server.addEventListener('close', () => {\n        this.handleWebSocketClose(session);\n      });\n\n      // Handle WebSocket errors\n      server.addEventListener('error', (error) => {\n        this.handleWebSocketError(session, error);\n      });\n      \n      // Send initial connection message\n      server.send(JSON.stringify({\n        type: 'connected',\n        timestamp: new Date().toISOString()\n      }));\n      \n      return new Response(null, {\n        status: 101,\n        webSocket: client,\n      });\n    }\n    \n    // Initialize the object\n    if (pathname === '/initialize') {\n      const data = await request.json();\n      \n      // Store all keys from the request body\n      for (const [key, value] of Object.entries(data)) {\n        await this.storage.put(key, value);\n      }\n      \n      return new Response(JSON.stringify({ status: 'initialized' }), {\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n    \n    // Call method endpoint\n    if (pathname.startsWith('/method/')) {\n      const method = pathname.slice('/method/'.length);\n      const params = await request.json();\n      \n      let result;\n      \n      // Handle different methods\n      switch (method) {\n        case 'echo':\n          // Echo back the received parameters\n          result = params;\n          break;\n          \n        case 'increment':\n          // Increment a counter\n          const counterKey = params.key || 'counter';\n          const increment = params.increment || 1;\n          \n          const currentValue = await this.storage.get(counterKey) || 0;\n          const newValue = currentValue + increment;\n          \n          await this.storage.put(counterKey, newValue);\n          \n          result = { [counterKey]: newValue };\n          break;\n          \n        case 'set_multiple':\n          // Set multiple keys at once\n          if (params.keys && typeof params.keys === 'object') {\n            await Promise.all(\n              Object.entries(params.keys).map(([key, value]) => \n                this.storage.put(key, value)\n              )\n            );\n            \n            result = { status: 'success', count: Object.keys(params.keys).length };\n          } else {\n            return new Response(JSON.stringify({ error: 'Invalid keys parameter' }), {\n              status: 400,\n              headers: { 'Content-Type': 'application/json' }\n            });\n          }\n          break;\n          \n        default:\n          return new Response(JSON.stringify({ error: 'Method not found' }), {\n            status: 404,\n            headers: { 'Content-Type': 'application/json' }\n          });\n      }\n      \n      return new Response(JSON.stringify(result), {\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n    \n    // Get state endpoint\n    if (pathname.startsWith('/state')) {\n      // Check if we're requesting a specific key\n      const parts = pathname.split('/');\n      const key = parts.length > 2 ? parts[2] : null;\n      \n      if (key) {\n        // Get a specific key\n        const value = await this.storage.get(key);\n        \n        if (value === undefined) {\n          return new Response(JSON.stringify({ error: 'Key not found' }), {\n            status: 404,\n            headers: { 'Content-Type': 'application/json' }\n          });\n        }\n        \n        return new Response(JSON.stringify({ [key]: value }), {\n          headers: { 'Content-Type': 'application/json' }\n        });\n      } else {\n        // Get all state\n        const keys = await this.storage.list();\n        const state = {};\n        \n        for (const [key, value] of keys) {\n          state[key] = value;\n        }\n        \n        return new Response(JSON.stringify(state), {\n          headers: { 'Content-Type': 'application/json' }\n        });\n      }\n    }\n    \n    // Update state endpoint (PUT /state/:key)\n    if (request.method === 'PUT' && pathname.startsWith('/state/')) {\n      const key = pathname.slice('/state/'.length);\n      \n      try {\n        const body = await request.json();\n        const value = body.value;\n        \n        await this.storage.put(key, value);\n        \n        return new Response(JSON.stringify({ status: 'updated', key }), {\n          headers: { 'Content-Type': 'application/json' }\n        });\n      } catch (error) {\n        return new Response(JSON.stringify({ error: error.message }), {\n          status: 400,\n          headers: { 'Content-Type': 'application/json' }\n        });\n      }\n    }\n    \n    // Delete state endpoint (DELETE /state/:key)\n    if (request.method === 'DELETE' && pathname.startsWith('/state/')) {\n      const key = pathname.slice('/state/'.length);\n      \n      await this.storage.delete(key);\n      \n      return new Response(JSON.stringify({ status: 'deleted', key }), {\n        headers: { 'Content-Type': 'application/json' }\n      });\n    }\n    \n    // Default: Not found\n    return new Response(JSON.stringify({ error: 'Not found' }), {\n      status: 404,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n  \n  // WebSocket handlers\n  \n  async handleWebSocketMessage(session, message) {\n    try {\n      const data = JSON.parse(message);\n      \n      // Handle different message types\n      switch (data.type) {\n        case 'echo':\n          // Echo the message back with the same ID\n          session.webSocket.send(JSON.stringify({\n            type: 'echo_response',\n            id: data.id,\n            data: data.data,\n            timestamp: new Date().toISOString()\n          }));\n          break;\n          \n        case 'get':\n          // Get a value from storage\n          const value = await this.storage.get(data.key);\n          session.webSocket.send(JSON.stringify({\n            type: 'get_response',\n            id: data.id,\n            key: data.key,\n            value: value,\n            timestamp: new Date().toISOString()\n          }));\n          break;\n          \n        case 'set':\n          // Set a value in storage\n          await this.storage.put(data.key, data.value);\n          session.webSocket.send(JSON.stringify({\n            type: 'set_response',\n            id: data.id,\n            key: data.key,\n            status: 'success',\n            timestamp: new Date().toISOString()\n          }));\n          break;\n          \n        default:\n          session.webSocket.send(JSON.stringify({\n            type: 'error',\n            error: 'Unknown message type',\n            timestamp: new Date().toISOString()\n          }));\n      }\n    } catch (error) {\n      session.webSocket.send(JSON.stringify({\n        type: 'error',\n        error: error.message,\n        timestamp: new Date().toISOString()\n      }));\n    }\n  }\n  \n  handleWebSocketClose(session) {\n    // Remove the session\n    this.sessions.delete(session.id);\n  }\n  \n  handleWebSocketError(session, error) {\n    // Log the error\n    console.error('WebSocket error:', error);\n    \n    // Remove the session\n    this.sessions.delete(session.id);\n  }\n}\n\n// Worker code\nexport default {\n  async fetch(request, env) {\n    const url = new URL(request.url);\n    const path = url.pathname.split('/');\n    \n    // Get the object ID from the URL (either directly specified or generate from name)\n    let id;\n    if (path[1] === 'id' && path.length > 2) {\n      // Direct ID: /id/...\n      id = env.BENCHMARK.idFromString(path[2]);\n    } else if (path[1] === 'name' && path.length > 2) {\n      // Name-based ID: /name/...\n      id = env.BENCHMARK.idFromName(path[2]);\n    } else {\n      // Default to a root object\n      id = env.BENCHMARK.idFromName('default');\n    }\n    \n    // Get the Durable Object stub\n    const obj = env.BENCHMARK.get(id);\n    \n    // Remove the ID/name part from the URL\n    const newUrl = new URL(request.url);\n    newUrl.pathname = '/' + path.slice(path[1] === 'id' || path[1] === 'name' ? 3 : 1).join('/');\n    \n    // Forward the modified request to the Durable Object\n    const newRequest = new Request(newUrl.toString(), request);\n    return obj.fetch(newRequest);\n  }\n} ", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/speed/cloudflare_durable_ex/benchmarks/worker/benchmark_worker.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/speed/cloudflare_durable_ex/benchmarks/worker/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/speed/cloudflare_durable_ex/benchmarks/worker/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/speed/cloudflare_durable_ex/benchmarks/worker/benchmark_worker.js\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/speed/cloudflare_durable_ex/benchmarks/worker/.wrangler/tmp/bundle-xtvoLe/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/speed/cloudflare_durable_ex/benchmarks/worker/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/speed/cloudflare_durable_ex/benchmarks/worker/.wrangler/tmp/bundle-xtvoLe/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/speed/cloudflare_durable_ex/benchmarks/worker/.wrangler/tmp/bundle-xtvoLe/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["key"]
}
